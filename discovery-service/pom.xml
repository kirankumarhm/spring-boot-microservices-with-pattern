<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.microservice.example</groupId>
        <artifactId>microservice-example</artifactId>
        <version>0.0.1</version>
    </parent>

    <!--    <groupId>com.microservice.example</groupId>-->
    <artifactId>discovery-service</artifactId>
    <version>0.0.1</version>
    <name>discovery-service</name>
    <description>Discovery Service project for Spring Boot</description>

    <properties>
        <java.version>20</java.version>
        <spring-cloud.version>2022.0.4</spring-cloud.version>
        <axon-spring-boot>4.8.2</axon-spring-boot>
        <google.guava.version>32.1.1-jre</google.guava.version>
        <lombok.version>1.18.30</lombok.version>
        <maven.compiler.source>20</maven.compiler.source>
        <maven.compiler.target>20</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

    </dependencies>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

<!--
1. It really does not matter whether you have profiles and different properties for each environment for building docker image.
2. Each property entries can be overridden by Kubernetes Deployment environment variables.
3. Special case for discovery-service :- We need to create headless service and refer that headless service in StatefulSet
StatefulSet is required to maintain the host registry, as pod will be created with the dynamic has value appended with pod name.
and we need to refer with hostname. StatefulSet does not work alone, we have to create headless service.
headless service : A service is a without ip address and creates endpoint

So, I am commenting out the profiles segment and keep it simple build
And as I mentioned in the #2 I will delete application-dev.properties and application-prod.properties
-->
    <!--
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
            <build>
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <spring.profiles.active>cloud</spring.profiles.active>
            </properties>
            <build>
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <version>3.3.2</version>
                        <configuration>
                            <from>
                                <image>eclipse-temurin:20-jdk-jammy</image>
                            </from>
                            <to>
                                <image>docker.io/kirankumarhm/${project.name}:${project.version}</image>
                            </to>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
-->


    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.google.cloud.tools</groupId>
                    <artifactId>jib-maven-plugin</artifactId>
                    <version>3.3.2</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>3.3.2</version>
                <configuration>
                    <to>
                        <image>docker.io/kirankumarhm/${project.name}:${project.version}</image>
                    </to>
                    <from>
                        <image>eclipse-temurin:20-jdk-jammy</image>
                    </from>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
